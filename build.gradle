buildscript {
	ext {
		springBootVersion = '1.5.14.RELEASE'
		axonVersion = '3.1.2'
		springfoxVersion = '2.7.0'
	}
	repositories {
		mavenCentral()
		maven {
		  url 'https://repo.spring.io/libs-release'
		}
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE')
	}
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "jacoco"
apply plugin: 'checkstyle'

group = 'org.aitesting.microservices'
jar.baseName = 'userservice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    maven {
        url 'https://dl.bintray.com/palantir/releases'
    }
}

ext {
	springCloudVersion = 'Edgware.SR3'
}

dependencies {

	compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.cloud:spring-cloud-config-client')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-security')
    
    compile('org.springframework.security.oauth:spring-security-oauth2')
    compile('org.springframework.security:spring-security-jwt')
    compile('org.springframework.security:spring-security-rsa')
    
	compile("io.springfox:springfox-swagger2:${springfoxVersion}")
	compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")
    compile('mysql:mysql-connector-java')
    
    testCompile('com.jayway.restassured:rest-assured:2.5.0')
    testCompile('com.jayway.restassured:spring-mock-mvc:2.5.0')
    testCompile('com.palantir.docker.compose:docker-compose-rule-junit4:0.33.0')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'junit', name: 'junit', version: '4.12'

	testCompile('org.mockito:mockito-core:2.8.9')
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Edgware.SR3'
	}
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
	reports {
		html.destination file("${buildDir}/jacocoHtml")
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: "${project.buildDir}/classes/main",
					exclude: ['**/service/services/ApiService*'])
		})
	}
	violationRules {
		rule {
			limit {
				minimum = 0.85
			}
		}
	}
}
test.finalizedBy(jacocoTestCoverageVerification)

checkstyle {
	toolVersion = "8.7"
	configFile = new File(rootDir, "checkstyle.xml")
}

checkstyleMain {
	source = fileTree('src/main') {
		excludes = ['*.yml']
	}
}
checkstyleTest {
	source = fileTree('src/test') {
		excludes = ['*.yml']
	}
}

