management.endpoints.web.exposure.include: "*"

---
spring:
  profiles: dev
  mvc:
    dispatch-options-request: true
  rabbitmq:
    host: ${RABBIT_HOST:rabbitmq}
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:mysqlserver}:3306/user_service
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
    
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    org.aitesting.microservices: DEBUG

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
        defaultZone: http://${EUREKA_SERVER:discoveryservice}:8761/eureka/

server:
  contextPath:   /auth
  port: ${APP_PORT:8080}
  
security.oauth2.resource.filter-order: 3

axon:
  cluster-name: ${spring.application.name}

signing.key: "front-end-signing-key"

---
spring:
  profiles: docker
  rabbitmq:
    host: ${RABBIT_HOST:rabbitmq}
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:mysqlserver}:3306/user_service
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
    
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    org.aitesting.microservices: DEBUG

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
        defaultZone: http://${EUREKA_SERVER:discoveryservice}:8761/eureka/

server:
  contextPath:   /auth
  port: ${APP_PORT:8080}
  
security.oauth2.resource.filter-order: 3

axon:
  cluster-name: ${spring.application.name}

signing.key: "front-end-signing-key"
  
jpa:
  database: MYSQL
  hibernate:
    ddl-auto: validate
    
---
spring:
  profiles: test
  rabbitmq:
    host: ${DOCKER_IP:localhost}
  datasource:
    url: jdbc:mysql://${DOCKER_IP:localhost}:3306/user_service
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
    
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    org.aitesting.microservices: DEBUG

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
        defaultZone: http://${DOCKER_IP:localhost}:8761/eureka/

server:
  contextPath:   /auth
  
security.oauth2.resource.filter-order: 3

axon:
  cluster-name: ${spring.application.name}

signing.key: "front-end-signing-key"